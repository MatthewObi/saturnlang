package main;
import string;
import cmath;
import io;

fn ptrfun(x: *int) {
    *x = 5;
}

type CStringArray : *cstring;

type Vector2 : struct {
    x: int = 7;
    y: int;
}

fn(*Vector2) getX(): int {
    return this.x;
}

fn(*Vector2) setX(newX : int): void {
    this.x = newX;
}

type IVector2 : tuple(int, int);

//main function
fn main(argc: int, argv: CStringArray): int {
    arrofints : [4]int;
    array2 := []int {77, 44, 13, 39};
    const fltarray := []float64 {
        0.0, 
        35.2
    };
    printf("fltarray[1] = %f", fltarray[0]);
    printf("argc = %d\n", argc);
    const PI  := 3.141593;
    const TAU := PI * 2.0;

    ss  := 55 <=> 33;
    ss2 := 55 <=> 55;
    ss3 := 33 <=> 55;
    printf("Spaceship: %d\n", ss);
    printf("Spaceship: %d\n", ss2);
    printf("Spaceship: %d\n", ss3);

    atomic aInt := 35;
    aInt -= 4;
    aInt ^= 45;

    testFile: File;
    res := testFile.open("test.txt", "r");
    if res != -1 {
        testFString := testFile.readLine();
        testFile.close();
        printf("test.txt: %s\n", testFString);
        if strcmp(testFString, "") != 0 {
            free(cast<*byte>(testFString));
        }
    } else {
        printf("Could not open file 'test.txt'\n");
    }

    testTuple := tuple { 33, "Hi." };
    undefinedTuple : *tuple(int, cstring);
    undefinedTuple = &testTuple;
    printf("tuple: %d %s\n", testTuple.0, testTuple.1);

    longTuple := tuple { 113, Vector2{x: 10, y: 17}, 1.5, tuple { 10, "Hi!" }, "" };
    //tuple0, tupletext := testTuple;

    ivector2 : IVector2;
    ivector2 = tuple { 10, -10 };
    printf("ivec2: (%d, %d)\n", ivector2.0, ivector2.1);
    ivector2.0 -= 6;
    printf("ivec2: (%d, %d)\n", ivector2.0, ivector2.1);

    myv2: Vector2;
    printf("myv2.x: %d\n", myv2.x);

    myv2.setX(89);
    myv2x := myv2.getX();
    printf("myv2.x: %d\n", myv2x);

    mymlstr := R("
        Hello, world!
        Hello
        world
        !
    ")R;

    emptyv2: Vector2;

    v2 := Vector2 {x: 0, y: 11};
    printf("Vector2 (x: %d, y: %d)\n", v2.x, v2.y);

    v2.x = 5;
    v2.y = 14;

    v2ptr := &v2;
    v2ptr.x = 11;

    printf("Vector2 (x: %d, y: %d)\n", v2.x, v2.y);
    ptrint := cast<int>(v2ptr);
    printf("v2ptr: 0x%X\n", ptrint);

    i := argc;
    while i > 0 {
        printf("argv[%d] = %s\n", i - 1, argv[i - 1]);
        i -= 1;
    }

    arrofints[0] = 4;
    arrofints[2] = 9;
    arrofints[3] = arrofints[0] + arrofints[2];

    arrayelptr := &arrofints[1];
    *arrayelptr = 11;

    for x in 0 .. 4 {
        printf("arrofints[%d] = %d\n", x, arrofints[x]);
    }

    for x in 1 .. 3 do printf("arrofints[%d] = %d\n", x, arrofints[x]);
    for x in 3 ... 0:-1 do printf("arrofints[%d] = %d\n", x, arrofints[x]);

    for a in 0 .. 2 do
        for b in 0 .. 2 do
            for c in 0 .. 2 do
                for d in 0 .. 2 do
                    printf("%d%d%d%d\n", a, b, c, d);

    printf("%d\n", switch_test(45));
    printf("%d\n", switch_test(11));
    printf("%d\n", switch_test(0));

    doVar := 15;
    do printf("%d ", doVar) while doVar < 0;
    doVar -= 1;
    do { 
        printf("%d ", doVar);
        doVar -= 1;
    } while doVar > 0;
    printf("\n");

    x := 0;
    while x < 4 {
        printf("array2[%d] = %d\n", x, array2[x]);
        x += 1;
    }

    strstruct: string = "Hello.";
    printf("%s (length = %d)\n", strstruct.cstr(), strstruct.length());

    strstruct2: string = "Hi!";
    printf("%d\n", strstruct <=> strstruct2);
    strstruct = strstruct2;
    printf("%s (length = %d)\n", strstruct.cstr(), strstruct.length());

    str := "Hello, world!\n";
    len := strlen(str);
    i := 10;
    j := 2;
    ptr2 := &i;
    printf("i = %d\n", i);
    ptrfun(&i);
    printf("i = %d\n", *ptr2);
    t := (*ptr2) + 5;
    i = t;
    f := -1.5;
    f = floor(f);
    if f > 0 && f < 3 then f = 2.0;
    while i > 0 {
        while j > 0 {
            printf("%d, %d\n", i, j);
            j-=1;
        }
        j = 2;
        i-=1;
    }
    k := j % 2;
    if k == 0 then 
        printf("j is even!\n"); 
    else 
        printf("j is odd!\n");
    if len > 5 then printf("String is greater than 5 characters!\n");
    printf(str);
    printf("length: %d\n", len);
    printf("%d squared = %d\n", len, square(len));
    printf("3! = %d\n", factorial(3));
    printf("5! = %d", factorial(5));
    return 0;
}