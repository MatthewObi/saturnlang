package io;

c_declare
{
    type FILE: struct;
    fn fopen(path: cstring, mode: cstring): *FILE;
    fn fclose(file: *FILE): void;
    fn fgets(str: cstring, num: int, stream: *FILE): cstring;

    fn malloc(size: int): *byte;
    fn free(ptr: *byte): void;
}

type File: struct {
    file: *FILE;
}

fn(*File) delete(): void {
    if this.file != null { 
        fclose(this.file);
        this.file = cast<*FILE>(null);
    }
}

fn(*File) open(path: cstring, mode: cstring): int {
    this.file = fopen(path, mode);
    return if this.file != null 
        then  0
        else -1;
}

fn(*File) readLine(): cstring {
    if this.file == null then return "";
    buffer : *byte;
    buffer = malloc(100);
    res := fgets(cast<cstring>(buffer), 100, this.file);
    if res != null then return res;
    free(buffer);
    return "";
}

fn(*File) isOpen(): bool {
    return if this.file != null 
        then  true
        else false;
}

fn(*File) close(): void {
    if this.file != null { 
        fclose(this.file);
        this.file = cast<*FILE>(null);
    }
    return;
}

