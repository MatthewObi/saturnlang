package main;
import std::lang::{string};
import std::math;

const myData := bin_include("test.bin");

type myEnum: enum(uint8) {
    CLOSED,
    OPEN,
    EH,
}

fn passByReference(x: &int)
{
    x += 15;
}

priv fn addNum(n: int): int
{
    return n + n;
}

pub fn fnApply(input: int, fx: *fn(int) -> int): int
{
    return fx(input);
}

pub fn testLambda(): int
{
    lambda := fn(x: int): int {
        return x * x;
    };
    printf("%d^2 = %d\n", 5, lambda(5));
    printf("%d^2 = %d\n", 7, lambda(7));
    printf("%d^2 = %d\n", 7, fn(x: int): int {
        return x * x;
    }(7));
    return 0;
}

priv fn GetString(): string
{
    return (string){};
}

pub fn testPassPtr(str: cstring): uint64
{
    len := 0ul;
    s := cast<*byte>(str);
    while *s != 0b {
        ++len;
        s = cast<*byte>(cast<uint64>(s) + 1ul);
    }
    return len;
}

pub fn testPassLambda()
{
    sq := fn(x: int): int {
        return x * x;
    };
    sum := fn(x: int): int {
        return x + x;
    };
    printf("  sq(%02d) = %02d\n", 5, fnApply(5,  sq));
    printf(" sum(%02d) = %02d\n", 5, fnApply(5, sum));
    printf("auto(%02d) = %02d\n", 5, fnApply(5,
        fn(x: int): int {
            if x > 0 {
                return (x*2) - (x/2);
            } else {
                return x - (x/2);
            }
        }
    ));
}

[[message("Hi! How are you doing? 🪐Ω»«°😃")]]
pub fn main(argc: int, argv: *cstring): int
{
    myE := myEnum::OPEN;
    if myE == myEnum::OPEN {
        myE = myEnum::CLOSED;
    }

    printf("Welcome to the 🪐Saturn Programming Language!🪐\n");
    str: string = "Hello, 世界! 😃 ";
    str2 := str + str;
    printf("%s (len = %d, alloc = %s)\n", str.ptr, str.len, "true" if str.alloc else "false");
    printf("%s (len = %d, alloc = %s)\n", str2.ptr, str2.len, "true" if str2.alloc else "false");
    str3 := str.substr(1u, 4u);
    printf("%s (len = %d, alloc = %s)\n", str3.ptr, str3.len, "true" if str3.alloc else "false");
    str4 := GetString();

    testLambda();
    testPassLambda();

    printf("pi = %lf\n", math::PI);
    printf("sin(pi / 2) = %lf\n", math::sin(math::PI / 2.0));
    printf("tan(pi / 4) = %lf\n", math::tan(math::PI / 4.0));
    printf("e^pi = %lf\n", math::exp(math::PI));
    printf("float64::max = %lf\n", float64::max);
    printf("int32::max = %d\n", int32::max);
    printf("%d! = %d\n", 4, factorial(4));
    strSwitchTest := "switch_test(%d) = %d\n";
    printf(strSwitchTest, 11, switch_test(11));
    printf(strSwitchTest, 45, switch_test(45));
    printf(strSwitchTest, 38, switch_test(38));
    strElseIfTest := "elif_test(%d) = %d\n";
    printf(strElseIfTest, 11, elif_test(11));
    printf(strElseIfTest, 45, elif_test(45));
    printf(strElseIfTest, 38, elif_test(38));

    x := 13;
    printf("x = %d\n", x);
    passByReference(x);
    printf("x = %d\n", x);

    printf("test.bin: ");
    for n in myData do
        printf("%02X ", n);
    printf("\n");

    printf("Evens: ");
    for i in 0...10:2 {
        printf("%02d ", i);
    }
    printf("\n");

    q := 0.123q;
    q += 0.25q;
    q = math::sinq(q);

    i := 5;
    ++i;
    j := ++i;

    return 0;
}



