package math;
/*
 * The math package for Saturn.
 * A package containing definitions for many fundamental mathematical constants and operations.
 *
 * Copyright Matthew Obi 2022
 *
 * Last modified 2022 March 08
 */

/*
 * Mathematical Constants
 */
pub const  PI: float64 = 3.14159265358979323846264338327950288419716939937510582097494459;
pub const   E: float64 = 2.71828182845904523536028747135266249775724709369995;
pub const TAU: float64 = 2.0 * 3.14159265358979323846264338327950288419716939937510582097494459;

/*
 * Basic Mathematical Functions
 */

pub fn abs(x: int8): int8 { return -x if x < 0sb else x; }

pub fn abs(x: int16): int16 { return -x if x < 0s else x; }

pub fn abs(x: int32): int32 { return -x if x < 0 else x; }

pub fn abs(x: int64): int64 { return -x if x < 0l else x; }

[[link_name("llvm.fabs.f32")]]
pub fn fabs(x: float32): float32;

[[link_name("llvm.fabs.f64")]]
pub fn fabs(x: float64): float64;

[[link_name("llvm.fabs.f128")]]
pub fn fabs(x: float128): float128;

[[link_name("llvm.sqrt.f32")]]
pub fn sqrt(x: float32): float32;

[[link_name("llvm.sqrt.f64")]]
pub fn sqrt(x: float64): float64;

[[link_name("llvm.sqrt.f128")]]
pub fn sqrt(x: float128): float128;

/*
 * Trig Functions
 */

[[link_name("llvm.sin.f32")]]
pub fn sin(x: float32): float32;

[[link_name("llvm.sin.f64")]]
pub fn sin(x: float64): float64;

[[link_name("llvm.sin.f128")]]
pub fn sin(x: float128): float128;

[[link_name("llvm.cos.f32")]]
pub fn cos(x: float32): float32;

[[link_name("llvm.cos.f64")]]
pub fn cos(x: float64): float64;

[[link_name("llvm.cos.f128")]]
pub fn cos(x: float128): float128;

pub fn tan(x: float32): float32 { return sin(x) / cos(x); }

pub fn tan(x: float64): float64 { return sin(x) / cos(x); }

/*
 * Exponential Functions
 */

[[link_name("llvm.pow.f32")]]
pub fn pow(val: float32, pow: float32): float32;

[[link_name("llvm.pow.f64")]]
pub fn pow(val: float64, pow: float64): float64;

[[link_name("llvm.pow.f128")]]
pub fn pow(val: float128, pow: float128): float128;

[[link_name("llvm.exp.f32")]]
pub fn exp(x: float32): float32;

[[link_name("llvm.exp.f64")]]
pub fn exp(x: float64): float64;

[[link_name("llvm.exp.f128")]]
pub fn exp(x: float128): float128;

[[link_name("llvm.exp2.f32")]]
pub fn exp2(x: float32): float32;

[[link_name("llvm.exp2.f64")]]
pub fn exp2(x: float64): float64;

[[link_name("llvm.exp2.f128")]]
pub fn exp2(x: float128): float128;

/*
 * Logarithmic Functions
 */

[[link_name("llvm.log.f32")]]
pub fn ln(x: float32): float32;

[[link_name("llvm.log.f64")]]
pub fn ln(x: float64): float64;

[[link_name("llvm.log.f128")]]
pub fn ln(x: float128): float128;

[[link_name("llvm.log10.f32")]]
pub fn log10(x: float32): float32;

[[link_name("llvm.log10.f64")]]
pub fn log10(x: float64): float64;

[[link_name("llvm.log10.f128")]]
pub fn log10(x: float128): float128;

[[link_name("llvm.log2.f32")]]
pub fn log2(x: float32): float32;

[[link_name("llvm.log2.f64")]]
pub fn log2(x: float64): float64;

[[link_name("llvm.log2.f128")]]
pub fn log2(x: float128): float128;

/*
 * Rounding Functions
 */

[[link_name("llvm.floor.f32")]]
pub fn floor(x: float32): float32;

[[link_name("llvm.floor.f64")]]
pub fn floor(x: float64): float64;

[[link_name("llvm.floor.f128")]]
pub fn floor(x: float128): float128;

[[link_name("llvm.ceil.f32")]]
pub fn ceil(x: float32): float32;

[[link_name("llvm.ceil.f64")]]
pub fn ceil(x: float64): float64;

[[link_name("llvm.ceil.f128")]]
pub fn ceil(x: float128): float128;

[[link_name("llvm.round.f32")]]
pub fn round(x: float32): float32;

[[link_name("llvm.round.f64")]]
pub fn round(x: float64): float64;

[[link_name("llvm.round.f128")]]
pub fn round(x: float128): float128;
