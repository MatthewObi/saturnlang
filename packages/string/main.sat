package string;

c_declare
{
    fn strlen(str: cstring): int;
    fn strcmp(lhs: cstring, rhs: cstring): int;
    fn strncmp(lhs: cstring, rhs: cstring, count: uint): int;
    fn strcoll(lhs: cstring, rhs: cstring): int;
    fn strchr(str: cstring, ch: int): cstring;
    fn strrchr(str: cstring, ch: int): cstring;
    fn strstr(str: cstring, substr: cstring): cstring;
    fn strcpy(dest: cstring, src: cstring): cstring;
    fn strcat(dest: cstring, src: cstring): cstring;
}

type string : struct {
    ptr : cstring;
    len : uint;
    alloc : bool;
}

fn(*string) new(): void {
    this.ptr = "";
    this.len = 1u;
    this.alloc = false;
}

fn(*string) delete(): void {
    if this.alloc == true {
        x := cast<*byte>(this.ptr);
    }
}

fn(*string) operator=(str: cstring): void {
    this.ptr = str;
    this.len = strlen(str);
    this.alloc = false;
}

fn(*string) operator=(str: string): void {
    this.ptr = str.ptr;
    this.len = str.len;
    this.alloc = str.alloc;
}

fn(*string) operator<=>(str: cstring): int {
    return strcmp(this.ptr, str);
}

fn(*string) operator<=>(str: string): int {
    return strcmp(this.ptr, str.ptr);
}

fn(*string) length(): uint {
    return this.len;
}

fn(*string) cstr(): cstring {
    return this.ptr;
}